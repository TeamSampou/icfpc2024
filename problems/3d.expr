EStr "Welcome to the 3D course!\n\nBack in the old days, when the Cult of the Bound Variable still lived on earth, programming languages were still quite primitive. For example, people wrote their programs in 2D, thereby ignoring the third dimension of time. Clearly the spacetime complexity of a program is 3-dimensional, and in this course you will learn to optimize the spacetime volume of your programs.\n\nBelow is a complete reference of the 3D language, which is a time-travel-oriented programming language. To keep the spacetime volume as small as possible, your program can use time warping to keep the time-axis small.\n\n# Syntax\n\nA 3D program is a text file that represents a 2D grid of cells. The rows are separated by newlines. Within each row, cells are represented by non-whitespace tokens separated by whitespace.\n\nIt is human-friendly but not mandatory to keep the columns aligned by adding extra whitespace between cells; each row is processed separately. Rows do not have to have the same length; short rows are assumed to be left-aligned: empty on the right.\n\n## Available tokens\n\n* `.` represents an empty cell\n* an integer between `-99` and `99` (inclusive) represents that integer\n* the following characters\n  `<`, `>`, `^`, `v`, `+`, `-`, `*`, `/`, `%`, `@`, `=`, `#`, `S`, `A`, `B`\n  represent operators.\n  See [the operator reference](#operator-reference) for their meaning.\n\n# Semantics\n\nThe board is an infinite 2D grid of cells. Each cell is either empty or contains a value. A value is either an arbitrarily sized integer or an operator.\n\nPrograms cannot contain arbitrarily sized integer literals. Integer literals can only range between `-99` and `99`, inclusive. This is a source-code-only restriction. At runtime, programs are free to compute with integers of arbitrary size.\n\n## Basic 2D reduction\n\nTime flows in discrete units, called ticks. The initial board is identical to the source code and its time coordinate is `t=1`. With each tick, we perform one round of reductions across the whole board simultaneously.\n\n[The operator reference](#operator-reference) defines the reduction rules of all operators. Generally, all operators perform local rewriting on their surroundings. For example, the \"move right\" operator `>` rewrites `x > .` to `. > x`.\n\nOperators are values, too, so `+ > .` reduces to `. > +`. This way, it's also possible to shuffle operators around.\n\nBinary operators, like `+`, `*`, or `-`, rewrite like this:\n```\n. y .     .  .   .\nx - .  ~> .  -  x-y\n. . .     . x-y  .\n```\n\nOperators `A` and `B` are replaced with the input values (if any) after parsing. This mechanism is used to give different inputs to your program.\n\nThere is operator `S`, which you can overwrite to terminate the program and submit the answer. It is an error to submit multiple different values, submitting the same value simultaneously multiple times is fine.\n\nSome reduction principles:\n\n1. If the preconditions of an operator are not met, reduction simply does not take place. For example, if a binary operator\n   has only one operand available, things stay as they are until the other operand arrives.\n\n2. Outputs of operators overwrite the output cells.\n\n   `1 > +` reduces to `. > 1`\n\n3. Reading a value removes/consumes it.\n\n4. Two operators can read from the same input cell at the same time. Both operators receive a copy of the input value before it's removed from the board.\n\n   `. < 6 > .` reduces to `6 < . > 6`\n\n5. Conflicting writes into the same cell like `3 > . < 3` or `3 > . < 4` are disallowed and will crash the simulation.\n\n6. In every tick, all reads (and removals) happen before all the writes.\n\n   `1 > 2 > .` reduces to `. > 1 > 2`\n\n### Operator reference\n\nIn the diagrams below, the symbol `.` generally stands for an empty cell or a non-empty cell containing any value. We use the dot instead of metavariables for readability.\n\nArrows move values of any type (integers or operators).\n```\n. < x   ~>   x < .         x > .   ~>   . > x\n\n\n  .            x             x            .\n  ^     ~>     ^             v     ~>     v\n  x            .             .            x\n```\n\nBinary arithmetic operators reduce only for integer arguments. They write their outputs both to the right and below at the same time.\n```\n. y .        .  .  .       . y .        .  .  .\nx + .   ~>   .  + x+y      x * .   ~>   .  * x*y\n. . .        . x+y .       . . .        . x*y .\n\n\n. y .        .  .  .\nx - .   ~>   .  - x-y\n. . .        . x-y .\n```\n\nOperators `/` and `%` represent the quotient and remainder operations: operator `/` truncates the result towards zero;\n`x%y` has the same sign as `x`.\n\n```\n. y .        .  .  .       . y .        .  .  .\nx / .   ~>   .  / x/y      x % .   ~>   .  % x%y\n. . .        . x/y .       . . .        . x%y .\n```\n\nEquality comparison reduces only if its two operands are equal. It works for both integers and operators.\n\n```\n. x .        . . .         . y .        . y .\nx = .   ~>   . = x         x = .   ~>   x = .  (if x!=y)\n. . .        . x .         . . .        . . .\n```\n\nDually, the not-equal operator reduces only when the operands are not equal:\n```\n. x .        . x .         . y .        . . .\nx # .   ~>   x # .         x # .   ~>   . # y  (if x!=y)\n. . .        . . .         . . .        . x .\n```\n\nOperators `A` and `B` have no reduction rules defined. They may appear in the program code but they are replaced with the input values (if any) immediately after parsing.\n\nOperator `S` (\"submit\") does not have any reduction rules defined, either. The program submits its results by overwriting operator `S` with the result value.\n\nThe time warp operator is described in [its own section](#time-warp).\n\n## Scoring\n\nYour score is the total spacetime volume of the program:\n* maximal X coordinate ever used minus minimal X coordinate ever used + 1\n* times (maximal Y coordinate ever used minus minimal Y coordinate ever used + 1)\n* times (maximal T coordinate ever used minus minimal T coordinate ever used + 1)\n\nIn this definition, \"ever used\" ranges across the entire simulation\nand across all time warps.\n\n## Limits\n\nAfter `1_000_000` ticks, the program is terminated without submitting a value, regardless of its current time coordinate.\n\n## Time warp\n\nYou may be able to reduce the time complexity of your program, defined as the maximum time coordinate reached, using time travel. Time travel is triggered with the (quaternary) warp operator:\n\n```\n .  v  .\ndx  @ dy\n . dt  .\n```\n\nThis rolls back the history of the board by `dt` time steps, writes value `v` into the cell with coordinates `(-dx, -dy)` relative to the `@` operator (note the negative signs!) on this past board, which means that the time coordinate of the target board is unchanged but the content is mutated. Then simulation then restarts from the modified point onward.\n\nThe minimal value of `dt` is `1`, which means stepping back one time step.\n\n```\n2 > . .        . > 2 .        2 > . .\n. 2 @ 0   ~>   . 2 @ 0   ~>   2 2 @ 0\n. . 1 .        . . 1 .        . . 1 .\n```\n\n### Time travel principles\n\n1. Time is discrete and starts with `t=1` with the initial board.\n\n2. Each tick, time `t` increases by 1, and the board is changed according to the action of all its operators.\n\n3. The time warp operator rolls back time to any point in the past, up to and including `t=1` (the initial board).\n\n4. Time warping with `dt=0` is not allowed.\n\n4. After time warping to time `t`, the history before `t` is preserved but the future after `t` is discarded and its new version will be recomputed again.\n\n5. If two different warp operators attempt to write different values into the same destination cell at the same destination time, the simulation will crash.\n\n   Warping the same value into the same cell is fine, as is warping different values into different cells. (This is different from basic 2D reduction, which does not allow writing the same value into the same cell by two different operators.)\n\n6. If two different warp operators attempt to travel to different times in the same tick, the simulation will crash.\n\n7. As soon as the submit operator is overwritten, the entire simulation stops.\n\n   A board can contain multiple submit operators but if more than one are overwritten at the same time, the simulation will crash.\n\n8. If no operator on a board can reduce, the simulation terminates without submitting an answer.\n\n# Example\n\nAs an example, the following program computes `A * B` by time-looping `B` times, adding `A` every time (for the sake of the example; of course there is also is the `*` operator):\n\n```\n. . . . 0 . . . .\n. B > . = . . . .\n. v 1 . . > . . .\n. . - . . . + S .\n. . . . . ^ . . .\n. . v . . 0 > . .\n. . . . . . A + .\n. 1 @ 6 . . < . .\n. . 3 . 0 @ 3 . .\n. . . . . 3 . . .\n```\n\nWhen running this for `A = 3` and `B = 4`, this program has a spacetime volume of `320` (`vx * vy * vt = 8 * 10 * 4 = 320`). You can see the execution trace at [3d-example].\n\n# Problems\n\nThe following problems are available:\n\n* [3d1] Best score: 2982.\n* [3d2] Best score: 1920.\n* [3d3] Best score: 1225.\n* [3d4] Best score: 2080.\n* [3d5] Best score: 3456.\n* [3d6] Best score: 3840.\n* [3d7] Best score: 8640.\n* [3d8] Best score: 43680.\n* [3d9] Best score: 17545.\n* [3d10] Best score: 40261.\n* [3d11] Best score: 182091.\n* [3d12] Best score: 64260.\n\nTo submit a solution, send an ICFP expression that evaluates to `solve 3dX` followed by your 3D program, e.g.:\n\n```\nsolve 3dX\n. . . . .\n. . . . .\n. . . . .\n```\n\nYour score is the sum of the spacetime complexity of your submission over the secret test cases, so a lower score is better.\n\n# Testing\n\nYou can test your 3D programs by sending:\n\n```\ntest 3d A B\n. . . . .\n. . . . .\n. . . . .\n```\n\nwhere `A` and `B` must be integer values which are given to the corresponding inputs. Unlike the `solve` command, the `test` command has a tick limit of `4`.\n\n"
