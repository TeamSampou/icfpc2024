{-# LANGUAGE GHC2021 #-}
module SmallICFPLang
    (
    ) where

import Control.Monad.Fix
import Text.ParserCombinators.ReadP
import Expr
import Interp

-- ICFP
_neg = negate
_not = not
_s2i str = decodeBase94 . fromICFPC $ str
_i2s n   = toICFPC . encodeBase94 $ n
_add = (+)
_sub = (-)
_mul = (*)
_qot = quot
_rem = rem
_lt,_gt,_eq :: Ord a => a -> a -> Bool
_lt  = (<)
_gt  = (>)
_eq  = (==)
_or  = (||)
_and = (&&)
_cat = (++)
_tak = take
_dro = drop
_apz  = ($)
_if c t e = if c then t else e

--

_replicate  = fix _replicateF
_replicateF = \ f -> \ n -> \ s -> _if (_eq n 0) "" (_cat s (_apz (_apz f (_sub n 1)) s))

_iter  = fix _iterF
_iterF = \ f -> \ n -> \ g -> \ x -> _if (_eq n 0) x (_apz g (_apz (_apz (_apz f (_sub n 1)) g) x))

{- |
>>> _lambdaman8 49
"UURRDDDDLLLLUUUUUURRRRRRDDDDDDDDLLLLLLLLUUUUUUUUUURRRRRRRRRRDDDDDDDDDDDDLLLLLLLLLLLLUUUUUUUUUUUUUURRRRRRRRRRRRRRDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL"
-}
_lambdaman8 :: Integer -> [Char]
_lambdaman8 = \ n -> _apz (_apz (_apz (_apz (_apz _lmbd8 n) "") "") "") ""

_lmbd8F :: (Integer -> [Char] -> [Char] -> [Char] -> [Char] -> [Char]) -> Integer -> [Char] -> [Char] -> [Char] -> [Char] -> [Char]
_lmbd8F = \ f -> \ m ds ls us rs ->
    _if (_eq m 0)
        (_cat ds ls)
        (_apz (_if (_eq (_rem m 2) 1) 
                   (\ rc -> _cat (_cat ds ls) rc)
                   (\ rc -> _cat (_cat us rs) rc))
              (_apz (_apz (_apz (_apz (_apz f (_sub m 1)) (_cat "DD" ds)) (_cat "LL" ls)) (_cat "UU" us)) (_cat "RR" rs)))

_lmbd8 :: Integer -> [Char] -> [Char] -> [Char] -> [Char] -> [Char]
_lmbd8 = fix _lmbd8F


{- --

transpile :: String -> Expr
transpile s = case readP_to_S rExpr s of
    [] -> error "transpile: parse error"
    rs -> case [ e | (e,"") <- rs] of
        [] -> error "transpile: partial parse"
        es -> head es

rExpr :: ReadP Expr
rExpr = choice
    [ rUnary
    , rBinary
    , rIf
    , rLambda
    , rLambdaVars
    , rAtom
    ]

rBool
 ,rInt
 ,rStr
 ,rUnary
 ,rBinary
 ,rIf
 ,rLambda
 ,rLambdaVars
 ,rVar
 ,rAtom :: ReadP Expr

rAtom = between (char '(') (char ')') rExpr
    +++ choice [rBool, rInt, rStr, rVar]

rBool = EBool <$> readS_to_P (reads @Bool)
rInt  = EInt  <$> readS_to_P (reads @Integer)
rStr  = EStr . BS.pack <$> readS_to_P (reads @String)
rUnary = EUnary <$> rUOp <*> rExpr

rUOp :: ReadP UOp
rUOp = choice [ rNeg, rNot, rS2I, rI2S ]
rNeg, rNot, rS2I, rI2S :: ReadP UOp
rNeg = Neg <$ string "_neg"
rNot = Not <$ string "_not"
rS2I = StrToInt <$ string "_s2i"
rI2S = IntToStr <$ string "_i2s"

rBinary = EBinary <$> rBinOp <*> rExpr <*> rExpr

rBinOp :: ReadP BinOp
rBinOp = choice
    [ rAdd
    , rSub
    , rMult
    , rDiv
    , rMod
    , rLt
    , rGt
    , rEql
    , rOr
    , rAnd
    , rConcat
    , rTake
    , rDrop
    , rApply
    , rApplyLazy
    , rApplyEager
    ]

rAdd
    , rSub
    , rMult
    , rDiv
    , rMod
    , rLt
    , rGt
    , rEql
    , rOr
    , rAnd
    , rConcat
    , rTake
    , rDrop
    , rApply
    , rApplyLazy
    , rApplyEager :: ReadP BinOp
rAdd = Add <$ string "_add"
rSub = Sub <$ string "_sub"
rMult = Mult <$ string "_mult"
rDiv = Div <$ string "_qot"
rMod = Mod <$ string "_rem"
rLt = Lt <$ string "_lt"
rGt = Gt <$ string "_gt"
rEql = Eql <$ string "_eql"
rOr = Or <$ string "_or"
rAnd = And <$ string "_and"
rConcat = undefined
rTake = undefined
rDrop = undefined
rApply = undefined
rApplyLazy = undefined
rApplyEager = undefined

rIf = undefined
rLambda = undefined
rLambdaVars = undefined
rVar = undefined

-- -}
